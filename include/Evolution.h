#ifndef EVOLUTION_H
#define EVOLUTION_H

#include <array>
#include "mesh.h"

//----------------------------------------------------------------------------------------------------------------------
/// @file Evolution.h
/// @class Evolution
/// @brief this class defines the landscape growth based on a set of rules
/// stores and applies the rules, stores the landscape iterations
//----------------------------------------------------------------------------------------------------------------------

class Evolution
{
public:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief class ctor
  //----------------------------------------------------------------------------------------------------------------------
  Evolution();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief class dtor
  //----------------------------------------------------------------------------------------------------------------------
  ~Evolution() = default;

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief method to fill landscape array with the calculated next iteration
  //----------------------------------------------------------------------------------------------------------------------
  void fillArray();

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief method to get the number of the iteration being calculated
  //----------------------------------------------------------------------------------------------------------------------
  size_t getIterationNum() const;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  method to set number of iterations to be calculated
  /// @param _n is input iteration number
  //----------------------------------------------------------------------------------------------------------------------
  void setIterationNum(const size_t _n);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief method to get the number of the iteration being visualised
  //----------------------------------------------------------------------------------------------------------------------
  size_t getIterationDrawnNum() const;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  method to set the number of the iteration to being visualised
  /// @param _n is input iteration number
  //----------------------------------------------------------------------------------------------------------------------
  void setIterationDrawnNum(const size_t _n);

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  method to get a landscape iteration
  /// @param _n is the number of ieration
  //----------------------------------------------------------------------------------------------------------------------
  const Mesh getIteration(const int _n) const;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  method to set a landscape as a specific iteration
  /// @param _n is number of the iteration, _landscapeToSet is the landscape input
  //----------------------------------------------------------------------------------------------------------------------
  void setIteration(const int _n, const Mesh _landscapeToSet);

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief method to get the colour palette chosen during evolution
  //----------------------------------------------------------------------------------------------------------------------
  int getEvolutionColourPalette() const;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  method to set the colour palette during evolution
  /// @param _paletteNumber is palette chosen
  //----------------------------------------------------------------------------------------------------------------------
  void setEvolutionColourPalette(const int _paletteNumber);

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief method to get the value for the left rule
  //----------------------------------------------------------------------------------------------------------------------
  float getLeftRule() const;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  method to set the value for the left rule
  /// @param _l is new left value
  //----------------------------------------------------------------------------------------------------------------------
  void setLeftRule(const float _l);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief method to get the value for the right rule
  //----------------------------------------------------------------------------------------------------------------------
  float getRightRule() const;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  method to set the value for the right rule
  /// @param _r is new left value
  //----------------------------------------------------------------------------------------------------------------------
  void setRightRule(const float _r);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief method to get the value for the centre rule
  //----------------------------------------------------------------------------------------------------------------------
  float getCentreRule() const;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  method to set the value for the centre rule
  /// @param _c is new centre value
  //----------------------------------------------------------------------------------------------------------------------
  void setCentreRule(const float _c);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief method to get the value for the bottom rule
  //----------------------------------------------------------------------------------------------------------------------
  float getBottomRule() const;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  method to set the value for the bottom rule
  /// @param _b is new centre value
  //----------------------------------------------------------------------------------------------------------------------
  void setBottomRule(const float _b);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief method to get the value for the top rule
  //----------------------------------------------------------------------------------------------------------------------
  float getTopRule() const;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  method to set the value for the top rule
  /// @param _t is new top value
  //----------------------------------------------------------------------------------------------------------------------
  void setTopRule(const float _t);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief method to get the value for the delta rule
  //----------------------------------------------------------------------------------------------------------------------
  float getDeltaRule() const;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  method to set the value for the delta rule
  /// @param _d is new top value
  //----------------------------------------------------------------------------------------------------------------------
  void setDeltaRule(const float _l);

private:
  int                   m_evolutionColourPalette;
  float                 m_left;
  float                 m_right;
  float                 m_centre;
  float                 m_bottom;
  float                 m_top;
  float                 m_delta;
  std::size_t           m_iterationNum;
  std::size_t           m_iterationDrawnNum;
  std::array<Mesh,501>  m_iterations;

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  method to apply the mathematical rules
  /// to the landscape as the iteration array is filled
  /// @param _previousLandscape is the landscape in the previous iteration
  //----------------------------------------------------------------------------------------------------------------------
  const Mesh applyRules(Mesh _previousLandscape);

};

#endif // EVOLUTION_H
